/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package view;

import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.Statement;
import java.util.Vector;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import javax.swing.table.DefaultTableModel;
import service.ConnectionDB;
import java.sql.Connection;
import service.Contants;
// Thêm lệnh import này
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.SQLException;
import java.sql.PreparedStatement;
import javax.swing.JFrame;


/**
 *
 * @author Phuong Thao
 */




public class Thongke extends javax.swing.JInternalFrame {
    /**
     * Creates new form 
     */
    
    private Nhapvao nhapvaoFrame;

    // Thêm constructor để nhận tham chiếu đến Nhapvao.java
    public Thongke(Nhapvao nhapvaoFrame) {
        this.nhapvaoFrame = nhapvaoFrame;
        initComponents();
        // Khởi tạo nhapvaoFrame ở đây hoặc tại bất kỳ điểm nào thích hợp
        //this.nhapvaoFrame = new Nhapvao();
        //this.nhapvaoFrame.setVisible(true);
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        // ... (Các dòng code khác trong constructor)
    }
    
    // Thêm phương thức để thiết lập giá trị cho nhapvaoFrame
    public void setNhapvaoFrame(Nhapvao nhapvaoFrame) {
        this.nhapvaoFrame = nhapvaoFrame;
    }
    
    public interface DataUpdatedListener {
    void onDataUpdated();
}

    private DataUpdatedListener dataUpdatedListener;

    
    public void setDataUpdatedListener(DataUpdatedListener listener) {
        this.dataUpdatedListener = listener;
    }
    
    
    public void updateData() {
        // Cập nhật dữ liệu trong cửa sổ Thongke
        loadbang();
    }
    
    
    
    final String[] header = {"ID", "Loại","Số tiền","Ghi chú","Thời gian"};
    final DefaultTableModel tb = new DefaultTableModel(header,0);
    
    ConnectionDB cn = new ConnectionDB();
    Connection conn;
    
    
    public Thongke() {
        initComponents();
        this.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        BasicInternalFrameUI ui = (BasicInternalFrameUI) this.getUI();
        ui.setNorthPane(null);

        loadbang();
    }
    
    
    public void addDataUpdatedListenerToEditFrame(editFrame editFrame) {
        editFrame.setDataUpdatedListener(new editFrame.DataUpdatedListener() {
            @Override
            public void onDataUpdated(String type, String price, String note, String time) {
                // Xử lý cập nhật dữ liệu vào bảng
                // Có thể thêm mã ở đây để cập nhật dữ liệu vào bảng thống kê
                // Ví dụ: tb.addRow(new Object[]{type, price, note, time});
                // Sau đó gọi loadbang() để cập nhật bảng
                loadbang();
            }
        });
    }
    
    
    
    
    public void loadbang(){
        try {
            conn = cn.getConnection();
            int number;
            Vector rowVector;
            
            String sql = "select ID, if(Type = 1, 'Thu', 'Chi') TypeName, if(Type = 1, Price, Price * -1) PriceText, "
                    + " Note, Time "
                    + " from manager_purse "
                    + " where status = 1 and User_ID = " + Contants.userId
                    + " ORDER BY Time ASC";
            Statement st = conn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            ResultSetMetaData metaData = rs.getMetaData();
            number = metaData.getColumnCount();
            tb.setRowCount(0);
            while (rs.next()) {
                Vector row = new Vector();
                for(int i = 1; i<= number;i++){
                    row.addElement(rs.getString(i));
                }
                tb.addRow(row);
                bangthongke.setModel(tb);
            }
            st.close();
            rs.close();
            conn.close();
                
            
        } catch (Exception e) {
        }
        
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        bangthongke = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        editButton = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        bangthongke.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "loại", "số tiền ", "ghi chú", "ngày "
            }
        ));
        bangthongke.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                bangthongkeKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(bangthongke);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 204, 153));
        jLabel1.setText("Thống kê");

        editButton.setText("Edit");
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });

        jButton2.setText("Delete");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(editButton)
                                .addGap(18, 18, 18)
                                .addComponent(jButton2)))
                        .addContainerGap(537, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 788, Short.MAX_VALUE)
                        .addGap(31, 31, 31))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 424, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(editButton)
                    .addComponent(jButton2))
                .addGap(17, 17, 17))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
        // Lấy hàng được chọn
        int selectedRow = bangthongke.getSelectedRow();
        if (selectedRow != -1) {
            // Lấy dữ liệu từ hàng được chọn
            String id = (String)tb.getValueAt(selectedRow, 0);
            String type = (String) tb.getValueAt(selectedRow, 1);
            String price = (String) tb.getValueAt(selectedRow, 2);
            String note = (String) tb.getValueAt(selectedRow, 3);
            String time = (String) tb.getValueAt(selectedRow, 4);

            // Mở editFrame và chuyển dữ liệu
            editFrame edit = new editFrame(type, price, note, time, id);
            edit.setVisible(true);
        } else {
            // Xử lý trường hợp khi không có hàng nào được chọn
            System.out.println("Không có hàng nào được chọn");
        }
    }//GEN-LAST:event_editButtonActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
       
     // Lấy chỉ số hàng được chọn
    int selectedRow = bangthongke.getSelectedRow();

    
    
    
    if (selectedRow != -1 ) {
        try {
            // Kết nối đến cơ sở dữ liệu
            conn = cn.getConnection();

            // Lấy giá trị của các cột từ hàng được chọn
            String id = (String) tb.getValueAt(selectedRow, 0);
            String priceText = (String) tb.getValueAt(selectedRow, 2);
//            String note = (String) tb.getValueAt(selectedRow, 2);
//            String time = (String) tb.getValueAt(selectedRow, 3);
            
            // Xóa dữ liệu từ cơ sở dữ liệu
            //String deleteSQL = "DELETE FROM manager_purse WHERE Type = ? AND Price = ? AND Note = ? AND Time = ?";
            
            //delete 
            String deleteSQL = "update manager_purse set Status = 0 where ID = " + id;
            Statement st = conn.createStatement();
            st.executeUpdate(deleteSQL);
            
            //update purse user
            String updatePurseSQL = "update users set Purse = Purse - (" + priceText + ") where ID = " + Contants.userId;
            st.executeUpdate(updatePurseSQL);
            
//            try (PreparedStatement pstmt = conn.prepareStatement(deleteSQL)) {
////                pstmt.setString(1, type);
////                pstmt.setString(2, priceText);
////                pstmt.setString(3, note);
////                pstmt.setString(4, time);
//                pstmt.executeUpdate();
//            }

            // Xóa hàng được chọn từ mô hình bảng
            tb.removeRow(selectedRow);

            // Cập nhật bảng với mô hình đã được sửa đổi
            bangthongke.setModel(tb);

            
            // Thông báo về sự thay đổi dữ liệu
                if (dataUpdatedListener != null) {
                    dataUpdatedListener.onDataUpdated();
                }
            
            
            if (nhapvaoFrame != null) {
                // Gọi phương thức cập nhật dữ liệu trong Nhapvao.java
                nhapvaoFrame.updateData();
            } else {
        System.out.println("NhapvaoFrame là null");
    }
            nhapvaoFrame.updateData();
        } catch (SQLException e) {
            // Xử lý ngoại lệ nếu có lỗi xảy ra trong quá trình thực hiện SQL
            e.printStackTrace();
        } finally {
            try {
                // Đóng kết nối đến cơ sở dữ liệu
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    } else {
        // Hiển thị thông báo nếu không có hàng nào được chọn
        System.out.println("Không có hàng nào được chọn");
    }   
    
    }//GEN-LAST:event_jButton2ActionPerformed

    private void bangthongkeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_bangthongkeKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_bangthongkeKeyPressed
    
    
    
    
    private void deleteData() {
        // Thực hiện logic xóa ở đây...

        // Giả sử nhapvaoInstance là một thể hiện của lớp Nhapvao
        if (nhapvaoFrame != null) {
            nhapvaoFrame.updateData();
        } else {
            System.out.println("NhapvaoFrame là null");
        }
    }
    
    
  

   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable bangthongke;
    private javax.swing.JButton editButton;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    
}
